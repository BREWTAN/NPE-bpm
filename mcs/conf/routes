# Routes
# This file defines all application routes (Higher priority routes first)
# ~~~~

# Home page
GET     /                   controllers.Application.index

# Map static resources from the /public folder to the /assets URL path
GET     /assets/*file               controllers.Assets.at(path="/public", file)


# FSMView

GET		/fsmstats			controllers.FSMViewer.stats
GET		/nodestats			controllers.FSMViewer.nodestats

GET		/reloadprocdef		controllers.FSMViewer.reloadprocdef


GET		/stop				controllers.FSMViewer.stop(names:String)

# Test API
GET 	/test1				controllers.Test1.getJson


# upload

GET 	/uploadtest				controllers.ProcDefHttpFace.test


POST 	/upload				controllers.ProcDefHttpFace.upload


## rest for procdef
GET  	/procdef			controllers.ProcDefHttpFace.getByPage(skip: Int?=0, limit: Int?=10,page:Boolean?=false)

GET 	/procdef/check		controllers.ProcDefHttpFace.validate

DELETE  /procdef/:defid 	controllers.ProcDefHttpFace.delete(defid:String)

PUT     /procdef/:defid		controllers.ProcDefHttpFace.update(defid:String)

GET  	/procdef/main		controllers.ProcDefHttpFace.getMainProc


##############
# procinst
GET  	/procinst			controllers.ProcInstFace.getByPage(skip: Int?=0, limit: Int?=10,status:Int?=0, query:String?=null,page:Boolean?=false)

DELETE  /procinst/:defid 	controllers.ProcInstFace.delete(defid:String)


##############
# taskinst
GET  	/taskinst			controllers.TaskInstFace.getByPage(skip: Int?=0, limit: Int?=10,status:Int?=0, query:String?=null,page:Boolean?=false)
GET  	/tasks_recycle		controllers.TaskInstFace.recycle(defids:String?=null)

DELETE  /taskinst/:defid 	controllers.TaskInstFace.delete(defid:String)



##################
# taskcenter

GET 	/taskcenter			controllers.TaskCenterFace.getByPage(skip: Int?=0, limit: Int?=10,status:Int?=0, query:String?=null,page:Boolean?=false)
DELETE  /taskcenter/:keyy 	controllers.TaskCenterFace.delete(keyy:String)
POST	/taskcenter			controllers.TaskCenterFace.insert
PUT		/taskcenter/:keyy	controllers.TaskCenterFace.update(keyy:String)

##################
# taskrole

GET 	/taskrole			controllers.TaskRoleFace.getByPage(skip: Int?=0, limit: Int?=10,status:Int?=0, query:String?=null,page:Boolean?=false)
DELETE  /taskrole/:keyy 	controllers.TaskRoleFace.delete(keyy:String)
POST	/taskrole			controllers.TaskRoleFace.insert
PUT		/taskrole/:keyy		controllers.TaskRoleFace.update(keyy:String)

GET		/taskrole/import	controllers.TaskRoleFace.importFromFlows


#################
# queue views
GET     /qstatbyname		controllers.QueueViewer.statsByName
GET     /qstatbycenter		controllers.QueueViewer.statsByCenter
GET 	/warnbytimeout  	controllers.QueueViewer.warnByTimeout(timeout: Long, states: String)


##################
# do work
GET		/obtain				controllers.QueueWorker.obtainByRole(obtainer:String?=null,role:String ?=null,center:String?=null)

POST	/submit				controllers.QueueWorker.submit()

POST 	/newproc			controllers.QueueWorker.newProc(submiter:String?=null,center:String?=null,procdef:String?=null,procinstid:String?=null)

GET		/hangup				controllers.QueueWorker.hangup(operator: String?=null, taskinstid:String?=null)

GET		/obtainhangup		controllers.QueueWorker.obtainFromHangup(obtainer:String?=null,role:String ?=null,center:String?=null,states:String?=null,extendsql:String?=null)

GET     /changepio			controllers.QueueWorker.changePIO(taskid:String,newPIO:Int)

##################
# logs

GET 	/oplogs			controllers.OplogsFace.getByPage(skip: Int?=0, limit: Int?=10,status:Int?=0, query:String?=null,page:Boolean?=false)
DELETE  /oplogs/:keyy 	controllers.OplogsFace.delete(keyy:String)
POST	/oplogs			controllers.OplogsFace.insert
PUT		/oplogs/:keyy		controllers.OplogsFace.update(keyy:String)


##################
# params

GET 	/params			controllers.ParamsFace.getByPage(skip: Int?=0, limit: Int?=10,status:Int?=0, query:String?=null,page:Boolean?=false)
DELETE  /params/:keyy 	controllers.ParamsFace.delete(keyy:String)
POST	/params			controllers.ParamsFace.insert
PUT		/params/:keyy		controllers.ParamsFace.update(keyy:String)





